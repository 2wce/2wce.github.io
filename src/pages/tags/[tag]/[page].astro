---
import TagPosts from "@layouts/TagPosts.astro";
import getPageNumbers from "@utils/getPageNumbers";
import getPagination from "@utils/getPagination";
import getPostsByTag from "@utils/getPostsByTag";
import getPostsWithRT from "@utils/getPostsWithRT";
import getUniqueTags from "@utils/getUniqueTags";
import { getCollection, type CollectionEntry } from "astro:content";

export interface Props {
  post: CollectionEntry<"blog">;
  tag: string;
  tagName: string;
}

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  const postsWithRT = await getPostsWithRT(posts); // replace reading time logic with this func

  const tags = getUniqueTags(posts);

  const result = await Promise.all(tags.map(async({ tag, tagName }) => {
    const tagPosts = await getPostsByTag(postsWithRT, tag);
    const totalPages = getPageNumbers(tagPosts.length);


    return totalPages.map(page => ({
      params: { tag, page },
      props: { tag, tagName },
    }));
  }));

  return result.flat();
}

const { page } = Astro.params;
const { tag, tagName } = Astro.props;

const posts = await getCollection("blog", ({ data }) => !data.draft);


const postsByTag = await getPostsByTag(posts, tag);

const pagination = getPagination({
  posts: postsByTag,
  page,
});


---

<TagPosts {...pagination} {tag} {tagName} />
