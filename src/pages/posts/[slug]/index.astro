---
import PostDetails from "@layouts/PostDetails.astro";
import Posts from "@layouts/Posts.astro";
import getPageNumbers from "@utils/getPageNumbers";
import getPagination from "@utils/getPagination";
import getPostsWithRT from "@utils/getPostsWithRT";
import getSortedPosts from "@utils/getSortedPosts";
import { getCollection, type CollectionEntry } from "astro:content";

export interface Props {
  post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const posts = await getCollection("blog", ({ data }) => !data.draft);

  const postsWithRT = await getPostsWithRT(posts); // replace reading time logic with this func

  const postResult = postsWithRT.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post: propPost } = Astro.props;

let post = propPost;
const posts = await getCollection("blog");

const sortedPosts = await getSortedPosts(posts);

const pagination = getPagination({
  posts: sortedPosts,
  page: slug,
});

if(!post && slug) {
 // if post is not found, try to find it in the sorted posts
  const foundPost = sortedPosts.find(post => post.slug === slug);
  if(foundPost) {
    post = foundPost;
  }
}

---

{post ? <PostDetails post={post} /> : <Posts {...pagination} />}
